# Grammar file for ruby-ll itself. This grammar doesn't use the various
# repetition operators (+, *, etc) to make it a tad easier to grok when working
# on the hand-written parser (which uses this grammar as a reference). It also
# doesn't use any grouping for the same reason.

%name LL::Parser

%tokens T_RUBY T_NAME T_TOKENS T_LEFT T_RIGHT T_INNER T_HEADER T_IDENT T_EQUALS
%tokens T_COLON T_PIPE T_STAR T_PLUS T_QUESTION T_LPAREN T_RPAREN T_EPSILON

# %name directives
#
# This handles the parsing of %name directives, which can either contain a
# single name (e.g. "Foo") or a Ruby namespace (e.g. "Foo::Bar").

name = T_NAME T_IDENT namespace_follow

namespace_follow
  = namespace_part namespace_follow
  | ...

namespace_part = T_COLON T_COLON T_IDENT

# Generic Directives
#
# This handles directives such as %left, %right, %tokens, etc.

tokens = T_TOKENS idents
left   = T_LEFT idents
right  = T_RIGHT idents

# Code Directives
#
# These are directives that can be used to specify inline Ruby code (e.g. %inner
# and %header).

inner  = T_INNER T_RUBY
header = T_HEADER T_RUBY

# Rules

rule = T_IDENT T_EQUALS rule_arms

rule_arms
  = rule_arm
  | rule_arm T_PIPE rule_arms

# Matches:
#
# foo
# foo bar { ruby code }
# ...
# ... { ruby code }
#
rule_arm
  = idents_or_epsilon
  | idents_or_epsilon T_RUBY

# Identifiers

idents        = T_IDENT idents_follow
idents_follow = idents | ...

idents_or_epsilon
  = idents_or_captures
  | T_EPSILON

idents_or_captures
  = T_IDENT idents_or_captures_follow

idents_or_captures_follow
  = idents_or_captures
  | T_COLON T_IDENT idents_or_capture
