#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module LL
  module BenchmarkParser
    class JSONRacc < Racc::Parser


  def yield_next_token
    yield [:T_LCURLY, '{']
    yield [:T_STRING, 'name']
    yield [:T_COLON, ':']
    yield [:T_STRING, 'Alice']
    yield [:T_COMMA, ',']
    yield [:T_STRING, 'age']
    yield [:T_COLON, ':']
    yield [:T_INT, 28]
    yield [:T_RCURLY, '}']
    yield [false, false]
  end

  def parse
    return yyparse(self, :yield_next_token)
  end

# vim: set ft=racc:
##### State transition tables begin ###

racc_action_table = [
     2,     2,     7,     3,     7,    17,     8,     9,    10,    11,
     7 ]

racc_action_check = [
    11,     0,    11,     1,     2,    11,     3,     4,     5,     6,
    10 ]

racc_action_pointer = [
    -1,     3,     0,     6,     4,     2,     4,   nil,   nil,   nil,
     6,    -2,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -10,   -10,   -10,   -10,   -10,    -2,   -10,    -8,    18,    -1,
   -10,   -10,    -3,    -4,    -5,    -6,    -7,    -9 ]

racc_goto_table = [
     1,     4,    14,    13,    15,   nil,   nil,   nil,   nil,    12,
   nil,    16 ]

racc_goto_check = [
     1,     2,     4,     5,     6,   nil,   nil,   nil,   nil,     2,
   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    -1,   nil,    -9,    -8,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 9, :_reduce_1,
  1, 10, :_reduce_2,
  3, 10, :_reduce_3,
  3, 11, :_reduce_4,
  1, 13, :_reduce_5,
  1, 13, :_reduce_6,
  1, 13, :_reduce_7,
  1, 12, :_reduce_8,
  1, 14, :_reduce_9 ]

racc_reduce_n = 10

racc_shift_n = 18

racc_token_table = {
  false => 0,
  :error => 1,
  :T_LCURLY => 2,
  :T_RCURLY => 3,
  :T_STRING => 4,
  :T_COLON => 5,
  :T_COMMA => 6,
  :T_INT => 7 }

racc_nt_base = 8

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_LCURLY",
  "T_RCURLY",
  "T_STRING",
  "T_COLON",
  "T_COMMA",
  "T_INT",
  "$start",
  "object",
  "pairs",
  "pair",
  "string",
  "value",
  "integer" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values)
 val[1] 
end

def _reduce_2(val, _values)
        val[0]
      
end

def _reduce_3(val, _values)
        new_hash = val[0]

        val[2].each do |key, value|
          new_hash[key] = value
        end

        new_hash
      
end

def _reduce_4(val, _values)
 {val[0] => val[2]} 
end

def _reduce_5(val, _values)
 val[0] 
end

def _reduce_6(val, _values)
 val[0] 
end

def _reduce_7(val, _values)
 val[0] 
end

def _reduce_8(val, _values)
 val[0] 
end

def _reduce_9(val, _values)
 val[0].to_i 
end

def _reduce_none(val, _values)
  val[0]
end

    end   # class JSONRacc
    end   # module BenchmarkParser
  end   # module LL
